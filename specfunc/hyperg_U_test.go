package specfunc

import (
	"fmt"
	"github.com/jtejido/ggsl/err"
	"strconv"
	"testing"
)

func TestHypergUInt(t *testing.T) {
	r := new(Result)
	cases := []struct {
		a, b        int
		x, expected float64
		tol         float64
	}{
		{1, 1, 0.0001, 8.634088070212725330, TEST_TOL0},
		{1, 1, 0.01, 4.078511443456425847, TEST_TOL0},
		{1, 1, 0.5, 0.9229106324837304688, TEST_TOL0},
		{1, 1, 2.0, 0.3613286168882225847, TEST_TOL0},
		{1, 1, 100, 0.009901942286733018406, TEST_TOL0},
		{1, 1, 1000, 0.0009990019940238807150, TEST_TOL0},
		{1, 8, 0.01, 7.272361203006010000e+16, TEST_TOL0},
		{1, 8, 1, 1957.0, TEST_TOL0},
		{1, 8, 5, 1.042496, TEST_TOL1},
		{1, 8, 8, 0.3207168579101562500, TEST_TOL0},
		{1, 8, 50, 0.022660399001600000000, TEST_TOL0},
		{1, 8, 100, 0.010631236727200000000, TEST_TOL0},
		{1, 8, 1000, 0.0010060301203607207200, TEST_TOL0},
		{1, 20, 1, 1.7403456103284421000e+16, TEST_TOL0},
		{1, 20, 20, 0.22597813610531052969, TEST_TOL0},
		{1, 50, 1, 3.374452117521520758e+61, TEST_TOL0},
		{1, 50, 50, 0.15394136814987651785, TEST_TOL0},
		{1, 100, 0.1, 1.0418325171990852858e+253, TEST_TOL2},
		{1, 100, 1, 2.5624945006073464385e+154, TEST_TOL2},
		{1, 100, 50, 3.0978624160896431391e+07, TEST_TOL2},
		{1, 100, 100, 0.11323192555773717475, TEST_TOL0},
		{1, 100, 200, 0.009715680951406713589, TEST_TOL0},
		{1, 100, 1000, 0.0011085142546061528661, TEST_TOL0},
		{1, 1000, 2000, 0.0009970168547036318206, TEST_TOL0},
		{1, -1, 1, 0.29817368116159703717, TEST_TOL1},
		{1, -1, 10, 0.07816669698940409380, TEST_TOL1},
		{1, -10, 1, 0.08271753756946041959, TEST_TOL1},
		{1, -10, 5, 0.06127757419425055261, TEST_TOL2},
		{1, -10, 10, 0.04656199948873187212, TEST_TOL2},
		{1, -10, 20, 0.031606421847946077709, TEST_TOL1},
		{1, -100, 0.01, 0.009900000099999796950, TEST_TOL2},
		{1, -100, 1, 0.009802970197050404429, TEST_TOL2},
		{1, -100, 10, 0.009001648897173103447, TEST_TOL2},
		{1, -100, 20, 0.008253126487166557546, TEST_TOL2},
		{1, -100, 50, 0.006607993916432051008, TEST_TOL2},
		{1, -100, 90, 0.005222713769726871937, TEST_TOL2},
		{1, -100, 110, 0.004727658137692606210, TEST_TOL2},
		{1, -1000, 1010, 0.0004971408839859245170, TEST_TOL4},
		{8, 1, 0.001, 0.0007505359326875706975, TEST_TOL0},
		{8, 1, 0.5, 6.449509938973479986e-06, TEST_TOL3},
		{8, 1, 8, 6.190694573035761284e-10, TEST_TOL0},
		{8, 1, 20, 3.647213845460374016e-12, TEST_TOL0},
		{8, 8, 1, 0.12289755012652317578, TEST_TOL1},
		{8, 8, 10, 5.687710359507564272e-09, TEST_TOL1},
		{8, 8, 20, 2.8175404594901039724e-11, TEST_TOL1},
		{100, 100, 0.01, 1.0099979491941914867e+196, TEST_TOL2},
		{100, 100, 0.1, 1.0090713562719862833e+97, TEST_TOL2},
		{100, 100, 1, 0.009998990209084729106, TEST_TOL2},
		{100, 100, 20, 1.3239363905866130603e-131, TEST_TOL2},
		{-10, 1, 0.01, 3.274012540759009536e+06, TEST_TOL0},
		{-10, 1, 1, 1.5202710000000000000e+06, TEST_TOL0},
		{-10, 1, 10, 1.0154880000000000000e+08, TEST_TOL0},
		{-10, 1, 100, 3.284529863685482880e+19, TEST_TOL0},
		{-10, 10, 1, 1.1043089864100000000e+11, TEST_TOL0},
		{-10, 100, 1, 1.3991152402448957897e+20, TEST_TOL0},
		{-10, 100, 10, 5.364469916567136000e+19, TEST_TOL0},
		{-10, 100, 100, 3.909797568000000000e+12, TEST_TOL0},
		{-10, 100, 500, 8.082625576697984130e+25, TEST_TOL0},
		{-50, 1, 0.01, 1.6973422555823855798e+64, TEST_TOL2},
		{-50, 1, 1, 7.086160198304780325e+63, TEST_TOL1},
		{-50, 1, 10, 5.332862895528712200e+65, TEST_TOL1},
		{-50, 10, 1, -7.106713471565790573e+71, TEST_TOL1},
		{-50, 100, 1, 2.4661377199407186476e+104, TEST_TOL1},
		{-50, 10, 10, 5.687538583671241287e+68, TEST_TOL1},
		{-50, 100, 10, 1.7880761664553373445e+102, TEST_TOL1},
		{-90, 1, 0.01, 4.185245354032917715e+137, TEST_TOL2},
		{-90, 1, 0.1, 2.4234043408007841358e+137, TEST_TOL3},
		{-90, 1, 10, -1.8987677149221888807e+139, TEST_TOL1},
		{-90, 10, 10, -5.682999988842066677e+143, TEST_TOL1},
		{-90, 100, 10, 2.3410029853990624280e+189, TEST_TOL2},
		{-90, 1000, 10, 1.9799451517572225316e+271, TEST_TOL3},
		{-50, -1, 10, -9.083195466262584149e+64, TEST_TOL1},
		{-50, -10, 10, -1.4418257327071634407e+62, TEST_TOL1},
		{-50, -100, 0.01, 3.0838993811468983931e+93, TEST_TOL2},
		{-50, -100, 10, 4.014552630378340665e+95, TEST_TOL2},
		{-100, -100, 10, 2.0556466922347982030e+162, TEST_TOL2},
		{-100, -200, 10, 1.1778399522973555582e+219, TEST_TOL2},
		{-100, -200, 100, 9.861313408898201873e+235, TEST_TOL3},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			stat := Hyperg_U_int_e(c.a, c.b, c.x, r)
			run_test_sf(t, stat, r, c.expected, c.tol, err.SUCCESS, fmt.Sprintf("Hyperg_U_int_e(%v,%v,%v)", c.a, c.b, c.x))
		})
	}
}

func TestHypergU(t *testing.T) {
	r := new(Result)
	cases := []struct {
		a, b, x, expected float64
		tol               float64
	}{
		{0.0001, 0.0001, 0.0001, 1.0000576350699863577, TEST_TOL1},
		{0.0001, 0.0001, 1.0, 0.9999403679233247536, TEST_TOL0},
		{0.0001, 0.0001, 100.0, 0.9995385992657260887, TEST_TOL0},
		{0.0001, 1, 0.0001, 1.0009210608660065989, TEST_TOL2},
		{0.0001, 1.0, 1.0, 0.9999999925484179084, TEST_TOL2},
		{0.0001, 10, 1, 13.567851006281412726, TEST_TOL3},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.0001, 10, 5,  1.0006265020064596364, TEST_SQRT_TOL0},
		{0.0001, 10, 10, 0.9999244381454633265, TEST_TOL0},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.0001, 100, 1,   2.5890615708804247881e+150, TEST_SQRT_TOL0},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.0001, 100, 10,   2.3127845417739661466e+55, TEST_SQRT_TOL0},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.0001, 100, 50,  6402.818715083582554, TEST_SQRT_TOL0},
		{0.0001, 100, 98, 0.9998517867411840044, TEST_TOL2},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.0001, 1000, 300,   2.5389557274938010716e+213, TEST_SQRT_TOL0},
		{0.0001, 1000, 999, 0.9997195294193261604, TEST_TOL2},
		{0.0001, 1000, 1100, 0.9995342990014584713, TEST_TOL1},
		// TEST_SF_RLX(s, gsl_sf_hyperg_U_e, (0.5, 1000, 300,  1.1977955438214207486e+217, TEST_SQRT_TOL0},
		{0.5, 1000, 800, 9.103916020464797207e+08, TEST_TOL2},
		{0.5, 1000, 998, 0.21970269691801966806, TEST_TOL2},
		{0.5, 0.5, 1.0, 0.7578721561413121060, TEST_TOL2},
		{1, 0.0001, 0.0001, 0.9992361337764090785, TEST_TOL1},
		{1, 0.0001, 1, 0.4036664068111504538, TEST_TOL2},
		{1, 0.0001, 100, 0.009805780851264329587, TEST_TOL1},
		{1, 1.2, 2.0, 0.3835044780075602550, TEST_TOL1},
		{1, -0.0001, 1, 0.4036388693605999482, TEST_TOL1},
		{8, 10.5, 1, 27.981926466707438538, TEST_TOL1},
		{8, 10.5, 10, 2.4370135607662056809e-8, TEST_TOL0},
		{8, 10.5, 100, 1.1226567526311488330e-16, TEST_TOL2},
		{10, -2.5, 10, 6.734690720346560349e-14, TEST_TOL1},
		{10, 2.5, 10, 6.787780794037971638e-13, TEST_TOL0},
		{10, 2.5, 50, 2.4098720076596087125e-18, TEST_TOL0},
		{-10.5, 1.1, 1, -3.990841457734147e+6, TEST_TOL2},
		{-10.5, 1.1, 10, 1.307472052129343e+8, TEST_TOL1},
		{-10.5, 1.1, 50, 3.661978424114088e+16, TEST_TOL0},
		{-10.5, 1.1, 90, 8.09469542130868e+19, TEST_TOL1},
		{-10.5, 1.1, 99, 2.546328328942063e+20, TEST_TOL1},
		{-10.5, 1.1, 100, 2.870463201832814e+20, TEST_TOL1},
		{-10.5, 1.1, 200, 8.05143453769373e+23, TEST_TOL2},
		{-10.5, 10.1, 0.1, -3.043016255306515e+20, TEST_TOL2},
		{-10.5, 10.1, 1, -3.194745265896115e+12, TEST_TOL1},
		{-10.5, 10.1, 4, -6.764203430361954e+07, TEST_TOL2},
		{-10.5, 10.1, 10, -2.067399425480545e+09, TEST_TOL1},
		{-10.5, 10.1, 50, 4.661837330822824e+14, TEST_TOL1},
		{-10.5, 100.4, 10, -6.805460513724838e+66, TEST_TOL1},
		{-10.5, 100.4, 50, -2.081052558162805e+18, TEST_TOL1},
		{-10.5, 100.4, 80, 2.034113191014443e+14, TEST_TOL2},
		{-10.5, 100.4, 100, 6.85047268436107e+13, TEST_TOL1},
		{-10.5, 100.4, 200, 1.430815706105649e+20, TEST_TOL2},
		{-19.5, 82.1, 10, 5.464313196201917432e+60, TEST_TOL2},
		{-50.5, 100.1, 10, -5.5740216266953e+126, TEST_TOL1},
		{-50.5, 100.1, 40, 5.937463786613894e+91, TEST_TOL1},
		{-50.5, 100.1, 50, -1.631898534447233e+89, TEST_TOL1},
		{-50.5, 100.1, 70, 3.249026971618851e+84, TEST_TOL2},
		{-50.5, 100.1, 100, 1.003401902126641e+85, TEST_TOL1},

		/* Bug report from Stefan Gerlach */

		{-2.0, 4.0, 1.0, 11.0, TEST_TOL0},

		{-2.0, 0.5, 3.14, 1.1896, TEST_TOL2},
		{-2.0, 0.5, 1.13, -1.3631, TEST_TOL2},
		{-2.0, 0.5, 0.0, 0.75, TEST_TOL2},
		{-2.0, 0.5, 1e-20, 0.75, TEST_TOL2},

		/* U(a,b,x) for x<0 [bug #27859] */

		/* Tests for b >= 0 */

		{0, 0, -0.1, 1, TEST_TOL0},
		{-1, 0, -0.1, -0.1, TEST_TOL0},
		{-2, 0, -0.1, 0.21, TEST_TOL0},
		{-3, 0, -0.1, -0.661, TEST_TOL0},
		{-4, 0, -0.1, 2.7721, TEST_TOL0},
		{-5, 0, -0.1, -14.52201, TEST_TOL0},
		{-6, 0, -0.1, 91.230301, TEST_TOL0},

		{0, 1, -0.1, 1.0, TEST_TOL0},
		{-1, 1, -0.1, -1.1, TEST_TOL0},
		{-2, 1, -0.1, 2.41, TEST_TOL1},
		{-3, 1, -0.1, -7.891, TEST_TOL2},
		{-4, 1, -0.1, 34.3361, TEST_TOL2},
		{-5, 1, -0.1, -186.20251, TEST_TOL2},
		{-6, 1, -0.1, 1208.445361, TEST_TOL2},

		{1, 2, -0.1, -10.0, TEST_TOL0},
		{0, 2, -0.1, 1.0, TEST_TOL2},
		{-1, 2, -0.1, -2.1, TEST_TOL2},
		{-2, 2, -0.1, 6.61, TEST_TOL2},
		{-3, 2, -0.1, -27.721, TEST_TOL2},
		{-4, 2, -0.1, 145.2201, TEST_TOL2},
		{-5, 2, -0.1, -912.30301, TEST_TOL2},
		{-6, 2, -0.1, 6682.263421, TEST_TOL2},

		{2, 3, -0.1, 100.0, TEST_TOL0},
		{1, 3, -0.1, 90.0, TEST_TOL2},
		{0, 3, -0.1, 1.0, TEST_TOL2},
		{-1, 3, -0.1, -3.10, TEST_TOL2},
		{-2, 3, -0.1, 12.81, TEST_TOL2},
		{-3, 3, -0.1, -66.151, TEST_TOL2},
		{-4, 3, -0.1, 409.8241, TEST_TOL2},
		{-5, 3, -0.1, -2961.42351, TEST_TOL2},
		{-6, 3, -0.1, 24450.804481, TEST_TOL2},

		{3, 4, -0.1, -1000.0, TEST_TOL0},
		{2, 4, -0.1, -1900.0, TEST_TOL2},
		{1, 4, -0.1, -1810.0, TEST_TOL2},
		{0, 4, -0.1, 1.0, TEST_TOL2},
		{-1, 4, -0.1, -4.10, TEST_TOL2},
		{-2, 4, -0.1, 21.01, TEST_TOL2},
		{-3, 4, -0.1, -129.181, TEST_TOL2},
		{-4, 4, -0.1, 926.5481, TEST_TOL2},
		{-5, 4, -0.1, -7594.16401, TEST_TOL2},
		{-6, 4, -0.1, 70015.788541, TEST_TOL2},

		/* Tests for b < 0 */

		{0, -1, -0.1, 1.0, TEST_TOL2},
		{-1, -1, -0.1, 0.9, TEST_TOL0},
		{-2, -1, -0.1, 0.01, TEST_TOL0},
		{-3, -1, -0.1, -0.031, TEST_TOL0},
		{-4, -1, -0.1, 0.1281, TEST_TOL0},
		{-5, -1, -0.1, -0.66151, TEST_TOL0},
		{-6, -1, -0.1, 4.098241, TEST_TOL0},

		{0, -2, -0.1, 1.0, TEST_TOL2},
		{-1, -2, -0.1, 1.9, TEST_TOL2},
		{-2, -2, -0.1, 1.81, TEST_TOL2},
		{-3, -2, -0.1, -0.001, TEST_TOL0},
		{-4, -2, -0.1, 0.0041, TEST_TOL0},
		{-5, -2, -0.1, -0.02101, TEST_TOL0},
		{-6, -2, -0.1, 0.129181, TEST_TOL0},

		{0, -3, -0.1, 1.0, TEST_TOL2},
		{-1, -3, -0.1, 2.9, TEST_TOL2},
		{-2, -3, -0.1, 5.61, TEST_TOL2},
		{-3, -3, -0.1, 5.429, TEST_TOL2},
		{-4, -3, -0.1, 0.0001, TEST_TOL0},
		{-5, -3, -0.1, -0.00051, TEST_TOL0},
		{-6, -3, -0.1, 0.003121, TEST_TOL0},

		{0, -4, -0.1, 1.0, TEST_TOL2},
		{-1, -4, -0.1, 3.9, TEST_TOL2},
		{-2, -4, -0.1, 11.41, TEST_TOL2},
		{-3, -4, -0.1, 22.259, TEST_TOL2},
		{-4, -4, -0.1, 21.7161, TEST_TOL2},
		{-5, -4, -0.1, -1e-5, TEST_TOL0},
		{-6, -4, -0.1, 0.000061, TEST_TOL0},
		{-7, -4, -0.1, -0.0004341, TEST_TOL0},

		/* Tests for integer a */

		{-3, 0.5, -0.5, -9.5, TEST_TOL2},
		{-8, 0.5, -0.5, 180495.0625, TEST_TOL2},
		{-8, 1.5, -0.5, 827341.0625, TEST_TOL2},
		{-8, 1.5, -10, 7.162987810253906e9, TEST_TOL2},
		{3, 6, -0.5, -296.0, TEST_TOL2},
		{3, 7, -0.5, 2824, TEST_TOL2},
		{5, 12, -1.7, -153.262676210016018065768591104, TEST_TOL2},

		/* A few random tests */

		{0, 0, -0.5, 1, TEST_TOL0},
		{0, 1, -0.5, 1, TEST_TOL0},
		{0, 1, -0.001, 1, TEST_TOL0},
		{-1, 0.99, -0.1, -1.09, TEST_TOL2},

		{-1, 0, -0.5, -0.5, TEST_TOL0},
		{-2, 0, -0.5, 1.25, TEST_TOL0},
		{-7, 0, -0.1, -668.2263421, TEST_TOL0},
		/* Bug report from Raymond Rogers */

		{4.11, 0.11, 6.4, 6.422378238765078623739153038e-5, TEST_TOL2},
		/* Addition tests from Raymond Rogers */
		{5, 4, 6.4, 3.2586223825343211136628535e-05, TEST_TOL2},
		{2.2, 1.2, 8.7, 5.7250017539318661177749625e-03, TEST_TOL2},
		{2, -6.4, 1, 1.2141502795806162484648638e-02, TEST_TOL2},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			stat := Hyperg_U_e(c.a, c.b, c.x, r)
			run_test_sf(t, stat, r, c.expected, c.tol, err.SUCCESS, fmt.Sprintf("Hyperg_U_e(%v,%v,%v)", c.a, c.b, c.x))
		})
	}
}
