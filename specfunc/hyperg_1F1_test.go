package specfunc

import (
	"fmt"
	"github.com/jtejido/ggsl/err"
	"strconv"
	"testing"
)

func TestHyperg1f1Int(t *testing.T) {
	r := new(Result)
	cases := []struct {
		m, n        int
		x, expected float64
		tol         float64
	}{
		{1, 1, 0.5, 1.6487212707001281468, TEST_TOL0},
		{1, 2, 500.0, 2.8071844357056748215e+214, TEST_TOL2},
		{1, 2, -500.0, 0.002, TEST_TOL0},
		{8, 1, 0.5, 13.108875178030540372, TEST_TOL0},
		{10, 1, 1.0, 131.63017574352619931, TEST_TOL0},
		{10, 1, 10.0, 8.514625476546280796e+09, TEST_TOL0},
		{10, 1, 100.0, 1.5671363646800353320e+56, TEST_TOL2},
		{10, 20, 1.0, 1.6585618002669675465, TEST_TOL2},
		{10, 20, 10.0, 265.26686430340188871, TEST_TOL2},
		{10, 20, 100.0, 3.640477355063227129e+34, TEST_TOL2},
		{10, 100, 1.0, 1.1056660194025527099, TEST_TOL0},
		{10, 100, 10.0, 2.8491063634727594206, TEST_TOL0},
		{10, 100, 40.0, 133.85880835831230986, TEST_TOL0},
		{10, 100, 80.0, 310361.16228011433406, TEST_TOL0},
		{10, 100, 100.0, 8.032171336754168282e+07, TEST_TOL2},
		{10, 100, 500.0, 7.633961202528731426e+123, TEST_TOL2},
		{100, 1, 1.0, 6.892842729046469965e+07, TEST_TOL1},
		{100, 1, 10.0, 2.4175917112200409098e+28, TEST_TOL1},
		{100, 1, 100.0, 1.9303216896309102993e+110, TEST_TOL2},
		{100, 200, 1.0, 1.6497469106162459226, TEST_TOL2},
		{100, 200, 10.0, 157.93286197349321981, TEST_TOL2},
		{100, 200, 100.0, 2.1819577501255075240e+24, TEST_TOL2},
		{100, 200, 400.0, 3.728975529926573300e+119, TEST_TOL2},
		{100, 400, 10.0, 12.473087623658878813, TEST_TOL0},
		{100, 400, 100.0, 9.071230376818550241e+11, TEST_TOL1},
		{100, 400, 150.0, 7.160949515742170775e+18, TEST_TOL0},
		{100, 400, 200.0, 2.7406690412731576823e+26, TEST_TOL2},
		{100, 400, 300.0, 6.175110613473276193e+43, TEST_TOL2},
		{100, 400, 400.0, 1.1807417662711371440e+64, TEST_TOL3},
		{100, 400, 600.0, 2.4076076354888886030e+112, TEST_TOL3},
		{10, 1, -1.0, 0.11394854824644542810, TEST_TOL0},
		{10, 1, -10.0, 0.0006715506365396127863, TEST_TOL1},
		{10, 1, -100.0, -4.208138537480269868e-32, TEST_TOL2},
		{10, 50, -1.0, 0.820006196079380, TEST_TOL0},
		{10, 100, -10.0, 0.38378859043466243, TEST_TOL0},
		{10, 100, -100.0, 0.0008460143401464189061, TEST_TOL0},
		{10, 100, -500.0, 1.1090822141973655929e-08, TEST_TOL0},
		{10, 100, -10000.0, 5.173783508088272292e-21, TEST_TOL2},
		{50, 1, -90.0, -1.6624258547648311554e-21, TEST_TOL2},
		{50, 1, -100.0, 4.069661775122048204e-24, TEST_TOL2},
		{50, 1, -110.0, 1.0072444993946236025e-25, TEST_TOL2},
		{100, 10, -100.0, -2.7819353611733941962e-37, TEST_TOL2},
		{100, 1, -90.0, 7.501705041159802854e-22, TEST_TOL2},
		{100, 1, -100.0, 6.305128893152291187e-25, TEST_TOL3},
		{100, 1, -110.0, -7.007122115422439755e-26, TEST_TOL3},
		{100, 10, -100.0, -2.7819353611733941962e-37, TEST_TOL2},
		{200, 50, -1.0, 0.016087060191732290813, TEST_TOL1},
		{200, 50, -300.0, -4.294975979706421471e-121, TEST_TOL2},
		{200, 100, -1.0, 0.13397521083325179687, TEST_TOL0},
		{200, 100, -10.0, 5.835134393749807387e-10, TEST_TOL1},
		{200, 100, -100.0, 4.888460453078914804e-74, TEST_TOL2},
		{200, 100, -500.0, -1.4478509059582015053e-195, TEST_TOL2},
		{-1, 1, 2.0, -1.0, TEST_TOL0},
		{-1, -2, 2.0, 2.0, TEST_TOL0},
		{-2, -3, 2.0, 3.0, TEST_TOL0},
		{-10, 1, 1.0, 0.4189459325396825397, TEST_TOL0},
		{-10, 1, 10.0, 27.984126984126984127, TEST_TOL0},
		{-10, 1, 100.0, 9.051283795429571429e+12, TEST_TOL0},
		{-100, 20, 1.0, 0.0020203016320697069566, TEST_TOL0},
		{-10, -20, 1.0, 1.6379141878548080173, TEST_TOL0},
		{-10, -20, 10.0, 78.65202404521289970, TEST_TOL0},
		{-10, -20, 100.0, 4.416169713262624315e+08, TEST_TOL0},
		{-10, -100, 1.0, 1.1046713999681950919, TEST_TOL0},
		{-10, -100, 10.0, 2.6035952191039006838, TEST_TOL0},
		{-10, -100, 100.0, 1151.6852040836932392, TEST_TOL0},
		{-100, -200, 1.0, 1.6476859702535324743, TEST_TOL0},
		{-100, -200, 10.0, 139.38026829540687270, TEST_TOL0},
		{-100, -200, 100.0, 1.1669433576237933752e+19, TEST_TOL1},
		{-10, -20, -1.0, 0.6025549561148035735, TEST_TOL0},
		{-10, -20, -10.0, 0.00357079636732993491, TEST_TOL1},
		{-10, -20, -100.0, 1.64284868563391159e-35, TEST_TOL2},
		{-10, -100, -1.0, 0.90442397250313899, TEST_TOL0},
		{-10, -100, -10.0, 0.35061515251367215, TEST_TOL1},
		{-10, -100, -100.0, 8.19512187960476424e-09, TEST_TOL2},
		{-100, -200, -1.0, 0.6061497939628952629, TEST_TOL0},
		{-100, -200, -10.0, 0.0063278543908877674, TEST_TOL1},
		{-100, -200, -100.0, 4.34111795007336552e-25, TEST_TOL2},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			stat := Hyperg_1F1_int_e(c.m, c.n, c.x, r)
			run_test_sf(t, stat, r, c.expected, c.tol, err.SUCCESS, fmt.Sprintf("Hyperg_1F1_int(%v,%v,%v)", c.m, c.n, c.x))
		})
	}
}

func TestHyperg1f1(t *testing.T) {
	r := new(Result)
	cases := []struct {
		a, b, x, expected float64
		tol               float64
	}{
		{1, 1.5, 1, 2.0300784692787049755, TEST_TOL0},
		{1, 1.5, 10, 6172.859561078406855, TEST_TOL0},
		{1, 1.5, 100, 2.3822817898485692114e+42, TEST_TOL1},
		{1, 1.5, 500, 5.562895351723513581e+215, TEST_TOL2},
		{1.5, 2.5, 1, 1.8834451238277954398, TEST_TOL0},
		{1.5, 2.5, 10, 3128.7352996840916381, TEST_TOL1},
		{10, 1.1, 1, 110.17623733873889579, TEST_TOL1},
		{10, 1.1, 10, 6.146657975268385438e+09, TEST_TOL1},
		{10, 1.1, 100, 9.331833897230312331e+55, TEST_TOL2},

		{10, 1.1, 500, 4.519403368795715843e+235, TEST_TOL2},
		{10, 50.1, 2, 1.5001295507968071788, TEST_TOL0},
		{10, 50.1, 10, 8.713385849265044908, TEST_TOL0},
		{10, 50.1, 100, 5.909423932273380330e+18, TEST_TOL2},
		{10, 50.1, 500, 9.740060618457198900e+165, TEST_TOL2},

		{100, 1.1, 1, 5.183531067116809033e+07, TEST_TOL2},
		{100, 1.1, 10, 1.6032649110096979462e+28, TEST_TOL2},
		{100, 1.1, 100, 1.1045151213192280064e+110, TEST_TOL2},

		{100, 50.1, 1, 7.222953133216603757, TEST_TOL1},
		{100, 50.1, 10, 1.0998696410887171538e+08, TEST_TOL1},
		{100, 50.1, 100, 7.235304862322283251e+63, TEST_TOL2},
		{1, 1.5, -1, 0.5380795069127684191, TEST_TOL0},
		{1, 1.5, -10, 0.05303758099290164485, TEST_TOL1},
		{1, 1.5, -100, 0.005025384718759852803, TEST_TOL1},
		{1, 1.5, -500, 0.0010010030151059555322, TEST_TOL1},
		{1, 1.1, -500, 0.00020036137599690208265, TEST_TOL1},
		{10, 1.1, -1, 0.07227645648935938168, TEST_TOL1},
		{10, 1.1, -10, 0.0003192415409695588126, TEST_TOL1},
		/*
		  sensitive to the pair_ratio hack in hyperg_1F1.c
		  TEST_SF_RLX(s, gsl_sf_hyperg_1F1_e, (10, 1.1, -100,   -8.293425316123158950e-16, 50.0*TEST_SNGL},
		*/
		{10, 1.1, -500, -3.400379216707701408e-23, TEST_TOL2},

		//  TEST_SF_RLX(s, gsl_sf_hyperg_1F1_e, (50, 1.1, -90,    -7.843129411802921440e-22, TEST_SQRT_TOL0},
		{50, 1.1, -100, 4.632883869540640460e-24, TEST_SQRT_TOL0},

		/* FIXME:
		   tolerance is poor, but is consistent within reported error
		*/
		{50, 1.1, -110.0, 5.642684651305310023e-26, 0.03},

		{100, 1.1, -1, 0.0811637344096042096, TEST_TOL2},
		{100, 1.1, -10, 0.00025945610092231574387, TEST_TOL2},
		{100, 1.1, -50, 2.4284830988994084452e-13, TEST_TOL2},
		{100, 1.1, -90, 2.4468224638378426461e-22, TEST_TOL2},
		{100, 1.1, -99, 1.0507096272617608461e-23, TEST_TOL2},
		{100, 1.1, -100, 1.8315497474210138602e-24, TEST_TOL2},

		/* FIXME:
		   Reported error is too small.
		{100, 1.1, -101,  -2.3916306291344452490e-24, 0.04},
		*/

		/* FIXME:
		   Reported error is too small.
		{100, 1.1, -110,  -4.517581986037732280e-26, TEST_TOL0},
		*/

		/* FIXME:
		   Result is terrible, but reported error is very large, so consistent.
		{100, 10.1, -220,  -4.296130300021696573e-64, TEST_TOL1},
		*/

		{-10, -10.1, 10.0, 10959.603204633058116, TEST_TOL1},
		{-10, -10.1, 1000.0, 2.0942691895502242831e+23, TEST_TOL2},
		{-10, -100.1, 10.0, 2.6012036337980078062, TEST_TOL1},
		{-1000, -1000.1, 10.0, 22004.341698908631636, TEST_TOL3},
		{-1000, -1000.1, 200.0, 7.066514294896245043e+86, TEST_TOL3},
		{-8.1, -10.1, -10.0, 0.00018469685276347199258, TEST_TOL0},
		/*  {-8.1, -1000.1, -10.0,   0.9218280185080036020, TEST_TOL0}, */
		{-10, -5.1, 1, 16.936141866089601635, TEST_TOL2},
		{-10, -5.1, 10, 771534.0349543820541, TEST_TOL2},
		{-10, -5.1, 100, 2.2733956505084964469e+17, TEST_TOL2},
		{-100, -50.1, -1, 0.13854540373629275583, TEST_TOL3},
		{-100, -50.1, -10, -9.142260314353376284e+19, TEST_TOL3},
		{-100, -50.1, -100, -1.7437371339223929259e+87, TEST_TOL3},
		{-100, -50.1, 1, 7.516831748170351173, TEST_TOL3},
		{-100, -50.1, 10, 1.0551632286359671976e+11, TEST_SQRT_TOL0},
		/*
		   These come out way off. On the other hand, the error estimates
		   are also very large; so much so that the answers are consistent
		   within the reported error. Something will need to be done about
		   this eventually
		  {-100, -50.1, 50,   -7.564755600940346649e+36, TEST_TOL3},
		  {-100, -50.1, 100,   4.218776962675977e+55, TEST_TOL3},
		*/
		{-10.5, -8.1, 0.1, 1.1387201443786421724, TEST_TOL0},
		{-10.5, -11.1, 1, 2.5682766147138452362, TEST_TOL1},
		{-100.5, -80.1, 10, 355145.4517305220603, TEST_TOL3},
		{-100.5, -102.1, 10, 18678.558725244365016, TEST_TOL1},
		{-100.5, -500.1, 10, 7.342209011101454, TEST_TOL0},
		{-100.5, -500.1, 100, 1.2077443075367177662e+8, TEST_TOL1},
		{-500.5, -80.1, 2, 774057.8541325341699, TEST_TOL4},
		/*
		  UNIMPL
		  {100, -10.1, 1,   -2.1213846338338567395e+12, TEST_TOL0},
		  {100, -10.1, 10,   -6.624849346145112398e+39, TEST_TOL0},
		  {100, -10.1, 100,   -1.2413466759089171904e+129, TEST_TOL0},
		*/
		/*
		  UNIMPL
		  {100, -10.1, -1,   34456.29405305551691, TEST_TOL0},
		  {100, -10.1, -10,   -7.809224251467710833e+07, TEST_TOL0},
		  {100, -10.1, -100,    -5.214065452753988395e-07, TEST_TOL0},
		*/
		{-100, 1.1, 1, 0.21519810496314438414, TEST_TOL2},
		{-100, 1.1, 10, 8.196123715597869948, TEST_TOL1},
		{-100, 1.1, 100, -1.4612966715976530293e+20, TEST_TOL1},
		{-100, 20.1, 1, 0.0021267655527278456412, TEST_TOL2},
		{-100, 20.1, 10, 2.0908665169032186979e-11, TEST_TOL2},
		{-100, 20.1, 100, -0.04159447537001340412, TEST_TOL2},
		{-100, 1.1, -1, 2.1214770215694685282e+07, TEST_TOL3},
		{-100, 1.1, -10, 1.0258848879387572642e+24, TEST_TOL3},
		{-100, 1.1, -100, 1.1811367147091759910e+67, TEST_TOL3},
		{-100, 50.1, -1, 6.965259317271427390, TEST_TOL3},
		{-100, 50.1, -10, 1.0690052487716998389e+07, TEST_TOL3},
		{-100, 50.1, -100, 6.889644435777096248e+36, TEST_TOL3},

		/* Bug report from Fernando Pilotto */

		{-2.05, 1.0, 5.05, 3.79393389516785e+00, TEST_TOL3},

		/* Bug reports from Ivan Liu */

		{-26, 2.0, 100.0, 1.444786781107436954e+19, TEST_TOL3},

		// #ifdef FIXME
		/* This one is computed with a huge error, there is loss of
		   precision but the error estimate flags the problem (assuming the
		   user looks at it).  We should probably trap any return with
		   err>|val| and signal loss of precision */

		//  {-26.1, 2.0, 100.0,  1.341557199575986995e+19, TEST_TOL3},
		// #endif

		/* Bug report H.Moseby */

		{1.2, 1.1e-15, 1.5, 8254503159672429.02, TEST_TOL3},

		{1.0, 1000000.5, 0.8e6 + 0.5, 4.999922505099443804e+00, TEST_TOL3},

		{1.0, 1000000.5, 1001000.5, 3480.3699557431856166, TEST_TOL4},

		// #ifdef FIXME /* FIX THESE NEXT RELEASE */
		//  {1.1, 1000000.5, 1001000.5,  7304.6126942641350122, TEST_TOL3},
		//  {0.9, 1000000.5, 1001000.5,  1645.4879293475410982, TEST_TOL3},
		// #endif

		{-1.1, 1000000.5, 1001000.5, -5.30066488697455e-04, TEST_TOL3},

		{1.5, 1000000.5, 0.8e6 + 0.5, 11.18001288977894650469927615, TEST_TOL4},

		/* Bug report Lorenzo Moneta <Lorenzo.Moneta@cern.ch> */

		{-1.5, 1.5, -100., 456.44010011787485545, TEST_TOL4},
		{-1.5, 1.5, 99., 4.13360436014643309757065e36, TEST_TOL4},
		{-1.5, 1.5, 100., 1.0893724312430935129254e37, TEST_TOL4},
		{-1.5, 1.5, 709., 8.7396804160264899999692120e298, TEST_TOL4},
		{-1.5, 1.5, 710., 2.36563187217417898169834615e299, TEST_TOL4},

		/* Bug report from Weibin Li <weibinli@mpipks-dresden.mpg.de> */

		// #ifdef FIXME
		//   {-37.8, 2.01, 103.58,  -6.21927211009e17, TEST_TOL1},
		// #endif

		/* Testing BJG */

		// #ifdef COMPARISON_WITH_MATHEMATICA
		//   /* Mathematica uses a different convention for M(-m,-n,x) */
		//   TEST_SF(s, gsl_sf_hyperg_1F1_int_e, (-1, -1, 0.1,  1.1, TEST_TOL0},
		//   {-1, -1, 0.1,   1.1, TEST_TOL0},
		// {-1, -1, 0.1, 1.1, TEST_TOL0},
		// #endif
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			stat := Hyperg_1F1_e(c.a, c.b, c.x, r)
			run_test_sf(t, stat, r, c.expected, c.tol, err.SUCCESS, fmt.Sprintf("Hyperg_1F1_e(%v,%v,%v)", c.a, c.b, c.x))
		})
	}
}
